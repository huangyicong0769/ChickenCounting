# from os.path import exists
import warnings

from ultralytics import YOLO

meta_params={
    'data': './data/data.yaml',
    'epochs': 200, 
    'batch': 0.85,
    'cache': True, 
    'project': f'ChickenCounting', 
    'plots': True, 
    'patience': 0,
    'iou_type': 'CIoU',
    'close_mosaic': 0,
    'pretrained': False,
    
    # Default Hyperparameters
    'optimizer': 'auto',
    'lr0': 0.01,
    'lrf': 0.01,
    'momentum': 0.937,
    'weight_decay': 0.0005,
    'warmup_epochs': 3.0,
    'warmup_momentum': 0.8,
    'box': 7.5,
    'cls': 0.5,
    'dfl': 1.5,
    'hsv_h': 0.015,
    'hsv_s': 0.7,
    'hsv_v': 0.4,
    'degrees': 0.0,
    'translate': 0.1,
    'scale': 0.5,
    'shear': 0.0,
    'perspective': 0.0,
    'flipud': 0.0,
    'fliplr': 0.5,
    'bgr': 0.0,
    'mosaic': 1.0,
    'mixup': 0.0,
    'copy_paste': 0.0,
    'ki': 575.0,
    'kd': 50.0,
}

hyp_params={
    'optimizer': 'AdamW',
    'lr0': 0.00732,
    'lrf': 0.01298,
    'momentum': 0.83868,
    'weight_decay': 0.0006,
    'warmup_epochs': 1.83822,
    'warmup_momentum': 0.59035,
    'box': 6.88413,
    'cls': 0.84057,
    'dfl': 1.46567,
    'hsv_h': 0.01287,
    'hsv_s': 0.89415,
    'hsv_v': 0.2089,
    'degrees': 0.0,
    'translate': 0.09686,
    'scale': 0.3474,
    'shear': 0.0,
    'perspective': 0.0,
    'flipud': 0.0,
    'fliplr': 0.36604,
    'bgr': 0.0,
    'mosaic': 0.82585,
    'mixup': 0.0,
    'copy_paste': 0.0,
}

hyp_params_WIoUv2={
    'optimizer': 'AdamW',
    'lr0': 0.00754,
    'lrf': 0.01,
    'momentum': 0.78741,
    'weight_decay': 0.0004,
    'warmup_epochs': 3.40158,
    'warmup_momentum': 0.58766,
    'box': 8.21054,
    'cls': 0.71407,
    'dfl': 1.23987,
    'hsv_h': 0.01471,
    'hsv_s': 0.60749,
    'hsv_v': 0.43685,
    'degrees': 0.0,
    'translate': 0.06498,
    'scale': 0.43362,
    'shear': 0.0,
    'perspective': 0.0,
    'flipud': 0.0,
    'fliplr': 0.31734,
    'bgr': 0.0,
    'mosaic': 1.0,
    'mixup': 0.0,
    'copy_paste': 0.0,
    'iou_type': 'WIoUv2',
}

hyp_params_SGD={
    'optimizer': 'SGD',
    'lr0': 0.00745,
    'lrf': 0.00758,
    'momentum': 0.96777,
    'weight_decay': 0.00085,
    'warmup_epochs': 1.84925,
    'warmup_momentum': 0.93664,
    'box': 4.7666,
    'cls': 0.45789,
    'dfl': 1.19228,
    'hsv_h': 0.01495,
    'hsv_s': 0.67288,
    'hsv_v': 0.32582,
    'degrees': 0.0,
    'translate': 0.07308,
    'scale': 0.44555,
    'shear': 0.0,
    'perspective': 0.0,
    'flipud': 0.0,
    'fliplr': 0.39590,
    'bgr': 0.0,
    'mosaic': 0.65968,
    'mixup': 0.0,
    'copy_paste': 0.0,
}

hyp_params_Lion_1={
    'optimizer': 'Lion',
    'lr0': 0.00290,
    'lrf': 0.001287,
    'momentum': 0.76593,
    'weight_decay': 0.00065,
    'warmup_epochs': 2.68085,
    'warmup_momentum': 0.75505,
    'box': 11.01667,
    'cls': 0.44731,
    'dfl': 1.75096,
    'hsv_h': 0.00928,
    'hsv_s': 0.49478,
    'hsv_v': 0.38818,
    'degrees': 0.0,
    'translate': 0.12426,
    'scale': 0.38759,
    'shear': 0.0,
    'perspective': 0.0,
    'flipud': 0.0,
    'fliplr': 0.45410,
    'bgr': 0.0,
    'mosaic': 0.99896,
    'mixup': 0.0,
    'copy_paste': 0.0,
}

hyp_params_Lion_2={
    'optimizer': 'Lion',
    'lr0': 0.00139,
    'lrf': 0.00645,
    'momentum': 0.7368,
    'weight_decay': 0.00027,
    'warmup_epochs': 1.6585,
    'warmup_momentum': 0.95,
    'box': 6.39146,
    'cls': 0.39737,
    'dfl': 1.56666,
    'hsv_h': 0.0107,
    'hsv_s': 0.24615,
    'hsv_v': 0.32267,
    'degrees': 0.0,
    'translate': 0.06023,
    'scale': 0.40217,
    'shear': 0.0,
    'perspective': 0.0,
    'flipud': 0.0,
    'fliplr': 0.36736,
    'bgr': 0.0,
    'mosaic': 0.75065,
    'mixup': 0.0,
    'copy_paste': 0.0,
}

hyp_params_SophiaG={
    'optimizer': 'SophiaG',
    'lr0': 0.00159,
    'lrf': 0.00985,
    'momentum': 0.7,
    'weight_decay': 0.00041,
    'warmup_epochs': 3.45935,
    'warmup_momentum': 0.88678,
    'box': 6.80929,
    'cls': 0.4601,
    'dfl': 1.33083,
    'hsv_h': 0.00852,
    'hsv_s': 0.19133,
    'hsv_v': 0.56906,
    'degrees': 0.0,
    'translate': 0.05583,
    'scale': 0.33694,
    'shear': 0.0,
    'perspective': 0.0,
    'flipud': 0.0,
    'fliplr': 0.29517,
    'bgr': 0.0,
    'mosaic': 0.44568,
    'mixup': 0.0,
    'copy_paste': 0.0,
}

hyp_params_PIDAO_ST={
    'optimizer': 'PIDAO_ST',
    'lr0': 0.002686,
    'lrf': 0.0143,
    'momentum': 0.98,
    'weight_decay': 0.00043,
    'warmup_epochs': 1.67097,
    'warmup_momentum': 0.90433,
    'box': 4.36771,
    'cls': 0.41139,
    'dfl': 1.01357,
    'hsv_h': 0.0275,
    'hsv_s': 0.39429,
    'hsv_v': 0.43832,
    'degrees': 0.0,
    'translate': 0.05763,
    'scale': 0.21581,
    'shear': 0.0,
    'perspective': 0.0,
    'flipud': 0.0,
    'fliplr': 0.38124,
    'bgr': 0.0,
    'mosaic': 0.94061,
    'mixup': 0.0,
    'copy_paste': 0.0,
    'ki': 7.67691,
    'kd': 1.66093,
}

hyp_params_PIDAO_SI={
    'optimizer': 'PIDAO_SI',
    'lr0': 0.00854,
    'lrf': 0.01082,
    'momentum': 0.96642,
    'weight_decay': 0.00042,
    'warmup_epochs': 3.39349,
    'warmup_momentum': 0.77002,
    'box': 7.07165,
    'cls': 0.56713,
    'dfl': 1.03515,
    'hsv_h': 0.01544,
    'hsv_s': 0.73394,
    'hsv_v': 0.27168,
    'degrees': 0.0,
    'translate': 0.08378,
    'scale': 0.3801,
    'shear': 0.0,
    'perspective': 0.0,
    'flipud': 0.0,
    'fliplr': 0.24849,
    'bgr': 0.0,
    'mosaic': 0.88684,
    'mixup': 0.0,
    'copy_paste': 0.0,
    'ki': 7.04986,
    'kd': 1.85233,
}

hyp_params_PIDAO_AdSI={
    'optimizer': 'PIDAO_AdSI',
    'lr0': 0.03996,
    'lrf': 0.00881,
    'momentum': 0.98,
    'weight_decay': 0.00041,
    'warmup_epochs': 2.02461,
    'warmup_momentum': 0.95,
    'box': 7.63664,
    'cls': 0.28209,
    'dfl': 2.85513,
    'hsv_h': 0.00659,
    'hsv_s': 0.36836,
    'hsv_v': 0.12227,
    'degrees': 0.0,
    'translate': 0.05936,
    'scale': 0.21599,
    'shear': 0.0,
    'perspective': 0.0,
    'flipud': 0.0,
    'fliplr': 0.46603,
    'bgr': 0.0,
    'mosaic': 1.0,
    'mixup': 0.0,
    'copy_paste': 0.0,
    'ki': 5.85459,
    'kd': 0.63658,
}

def main(model_type, __debug=None):
    params = meta_params
  
    print(f"Training {model_type}:")
    if params['pretrained'] == False:
        model = YOLO(model_type+".yaml")
    else:
        model = YOLO(model_type+".yaml").load(f"ChickenCounting/{model_type}_100e_coco/weights/last.pt")
    # params['optimizer'] = 'CAdamW'
    params['name'] = f"{model_type}_{params['epochs']}e{"_cocopt" if params['pretrained'] else ""}_"
    
    if __debug == True:
        return params['name']
        
    model.train(data=params['data'],
                epochs=params['epochs'],
                batch=params['batch'],
                cache=params['cache'],
                project=params['project'],
                name=params['name'],
                pretrained=params['pretrained'],
                patience=params['patience'],
                plots=params['plots'],
                close_mosaic=params['close_mosaic'],
                iou_type=params['iou_type'],
                optimizer=params['optimizer'],
                lr0=params['lr0'],
                lrf=params['lrf'],
                momentum=params['momentum'],
                weight_decay=params['weight_decay'],
                warmup_epochs=params['warmup_epochs'],
                warmup_momentum=params['warmup_momentum'],
                kp = 1./(params['lr0']*params['momentum']),
                ki = params['ki'],
                kd = params['kd'],
                box=params['box'],
                cls=params['cls'],
                dfl=params['dfl'],
                hsv_h=params['hsv_h'],
                hsv_s=params['hsv_s'],
                hsv_v=params['hsv_v'],
                degrees=params['degrees'],
                translate=params['translate'],
                scale=params['scale'],
                shear=params['shear'],
                perspective=params['perspective'],
                flipud=params['flipud'],
                fliplr=params['fliplr'],
                bgr=params['bgr'],
                mosaic=params['mosaic'],
                mixup=params['mixup'],
                copy_paste=params['copy_paste'],
                # exist_ok=True,
                )

if __name__ == "__main__":
    warnings.filterwarnings("ignore", category=UserWarning)
    failed = []
    for model in ["yolov8s_GD_DySample_v" for _ in range(3)]:
        try:
            main(model_type=model, __debug=None)
        except Exception as e:
            failed.append(f"training {model} failed: {e}")
            
    for f in failed:
        print(f)